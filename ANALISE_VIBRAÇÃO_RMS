#include <stdio.h>
#include <math.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include <pico-ssd1306/ssd1306.h>
#include <string.h>

// Configuração do I2C
#define I2C_PORT i2c0
#define SDA_PIN 8
#define SCL_PIN 9

// Endereço I2C do ADXL345
#define ADXL345_ADDRESS 0x53

// Registradores principais
#define ADXL345_REG_POWER_CTL  0x2D
#define ADXL345_REG_DATA_FORMAT 0x31
#define ADXL345_REG_DATAX0 0x32

// Número de amostras para cálculo do RMS
#define NUM_SAMPLES 100

// Fator de conversão de aceleração (g) para velocidade (mm/s)
#define G_TO_MM_S2 9806.65
#define FREQ_HZ 400  // Frequência de amostragem
#define CONVERSION_FACTOR (1 / (2 * M_PI * FREQ_HZ))

// Estrutura do sensor
typedef struct {
    i2c_inst_t *i2c;
    uint8_t address;
    float accel_x, accel_y, accel_z;
} adxl345_t;

// Função para escrever um byte no ADXL345
void adxl345_write_byte(adxl345_t *sensor, uint8_t reg, uint8_t value) {
    uint8_t buffer[2] = {reg, value};
    i2c_write_blocking(sensor->i2c, sensor->address, buffer, 2, false);
}

// Função para ler múltiplos bytes do ADXL345
void adxl345_read_bytes(adxl345_t *sensor, uint8_t reg, uint8_t *buffer, uint8_t len) {
    i2c_write_blocking(sensor->i2c, sensor->address, &reg, 1, true);
    i2c_read_blocking(sensor->i2c, sensor->address, buffer, len, false);
}

// Inicializa o ADXL345
void adxl345_init(adxl345_t *sensor, i2c_inst_t *i2c_port, uint8_t address) {
    sensor->i2c = i2c_port;
    sensor->address = address;
    adxl345_write_byte(sensor, ADXL345_REG_POWER_CTL, 0x08);
    adxl345_write_byte(sensor, ADXL345_REG_DATA_FORMAT, 0x08);
}

// Lê os valores de aceleração
void adxl345_read(adxl345_t *sensor) {
    uint8_t buffer[6];
    adxl345_read_bytes(sensor, ADXL345_REG_DATAX0, buffer, 6);

    int16_t raw_x = (buffer[1] << 8) | buffer[0];
    int16_t raw_y = (buffer[3] << 8) | buffer[2];
    int16_t raw_z = (buffer[5] << 8) | buffer[4];

    sensor->accel_x = raw_x * 0.004;
    sensor->accel_y = raw_y * 0.004;
    sensor->accel_z = raw_z * 0.004;
}

// Função para calcular RMS de um vetor de amostras
float calculate_rms(float *data, int size) {
    float sum = 0.0;
    for (int i = 0; i < size; i++) {
        sum += data[i] * data[i];
    }
    return sqrt(sum / size);
}

// Diagnóstico baseado na norma ISO 10816-3
typedef enum {
    NORMAL,
    DESBALANCEADO,
    DESALINHADO
} diagnostico_t;

diagnostico_t determinar_diagnostico(float vel_rms) {
    if (vel_rms < 2.3) {
        return NORMAL;
    } else if (vel_rms >= 2.3 && vel_rms < 4.5) {
        return DESBALANCEADO;
    } else {
        return DESALINHADO;
    }
}

void imprimir_diagnostico(diagnostico_t diag, char *buffer) {
    switch (diag) {
        case NORMAL:
            sprintf(buffer, "Estado: Normal");
            break;
        case DESBALANCEADO:
            sprintf(buffer, "Estado: Desbalanceado");
            break;
        case DESALINHADO:
            sprintf(buffer, "Estado: Desalinhado");
            break;
    }
}
// Inicializa o I2C para o display (utilizando i2c1 nos pinos 14 e 15)
void init_i2c_display(void) {
    i2c_init(i2c1, 400000);
    gpio_set_function(14, GPIO_FUNC_I2C);
    gpio_set_function(15, GPIO_FUNC_I2C);
    gpio_pull_up(14);
    gpio_pull_up(15);
}
int main() {
    stdio_init_all();

    // Inicializa I2C
    i2c_init(I2C_PORT, 400 * 1000);
    gpio_set_function(SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(SDA_PIN);
    gpio_pull_up(SCL_PIN);

    // Inicializa o ADXL345
    adxl345_t adxl;
    adxl345_init(&adxl, I2C_PORT, ADXL345_ADDRESS);

    float ax[NUM_SAMPLES], ay[NUM_SAMPLES], az[NUM_SAMPLES];
    float offset_z = 0.0;

    // Inicializa o I2C e o display OLED
    init_i2c_display();
    ssd1306_t disp;
    disp.external_vcc = false;
    ssd1306_init(&disp, 128, 64, 0x3C, i2c1);

    // Buffers para armazenar as strings
    char line1[32];
    char line2[32];
    char line3[32];
    char line4[32];

    // Calibração inicial da gravidade na direção Z
    for (int i = 0; i < NUM_SAMPLES; i++) {
        adxl345_read(&adxl);
        offset_z += adxl.accel_z;
        sleep_ms(10);
    }
    offset_z /= NUM_SAMPLES;

    while (1) {
        for (int i = 0; i < NUM_SAMPLES; i++) {
            adxl345_read(&adxl);
            ax[i] = adxl.accel_x * G_TO_MM_S2 * CONVERSION_FACTOR;
            ay[i] = adxl.accel_y * G_TO_MM_S2 * CONVERSION_FACTOR;
            az[i] = (adxl.accel_z - offset_z) * G_TO_MM_S2 * CONVERSION_FACTOR;
            sleep_ms(10);
        }

        // Cálculo do RMS
        float rms_x = calculate_rms(ax, NUM_SAMPLES);
        float rms_y = calculate_rms(ay, NUM_SAMPLES);
        float rms_z = calculate_rms(az, NUM_SAMPLES);
        float total_rms = sqrt((rms_x * rms_x) + (rms_y * rms_y) + (rms_z * rms_z));
	
	// Limpa o display
        ssd1306_clear(&disp);

        // Formata os dados para exibição
        sprintf(line1, "RMS: %.2f mm/s", total_rms);
        diagnostico_t diag = determinar_diagnostico(total_rms);
        imprimir_diagnostico(diag, line2);

 	// Desenha as linhas no display (posição x=0, e y variando)
        ssd1306_draw_string(&disp, 0, 0, 1, line1);
        ssd1306_draw_string(&disp, 0, 10, 1, line2);
        //ssd1306_draw_string(&disp, 0, 20, 1, line3);
       //ssd1306_draw_string(&disp, 0, 30, 1, line4);
        ssd1306_show(&disp);

        printf("------------------------------\n");
        printf("%s\n%s\n", line1, line2);
        
        sleep_ms(2000);
    }
    return 0;
}
