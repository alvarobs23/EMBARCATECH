#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "hardware/adc.h"
#include "pico/time.h"
#include "ssd1306.h"

// =====================
// DEFINIÇÕES DE HARDWARE
// =====================
// I2C para ADXL345 (sensor) – pinos 8 e 9
#define I2C_SENSOR i2c0
#define PIN_I2C_SENSOR_SDA 8
#define PIN_I2C_SENSOR_SCL 9
#define ADXL345_ADDR 0x53  // Endereço típico do ADXL345

// I2C para OLED – pinos 14 e 15
#define I2C_OLED i2c1
#define PIN_I2C_OLED_SDA 14
#define PIN_I2C_OLED_SCL 15
#define OLED_ADDR 0x3C  // Endereço comum para displays SSD1306

// ADC para joystick
#define JOYSTICK_ADC_X 26
#define JOYSTICK_ADC_Y 27
#define JOYSTICK_BTN_PIN 5

// Fator de escala para conversão de raw ADXL345 para g (ajuste conforme o modo de operação)
#define ADXL345_SCALE 0.0039f

// Calibração para o eixo Z (compensação da aceleração da gravidade)
// Valor pré-definido para calibragem (por exemplo, 1g)
#define CALIB_Z 1.0f

// Limites de RMS (em g) para diagnóstico – valores exemplificativos
#define RMS_LIMIT_20CV_RIGID      0.50f
#define RMS_LIMIT_20CV_FLEXIBLE   0.70f
#define RMS_LIMIT_ABOVE20CV_RIGID   0.80f
#define RMS_LIMIT_ABOVE20CV_FLEXIBLE 1.00f

// Taxa de amostragem e número de amostras por janela de 1 segundo
#define SAMPLE_RATE_HZ 1000
#define SAMPLE_COUNT   SAMPLE_RATE_HZ

// =====================
// TIPOS E VARIÁVEIS GLOBAIS
// =====================

// Estados do menu
typedef enum {
    MENU_MAIN,       // Exibe classificação: Motor até 20CV ou >20CV
    MENU_SUB,        // Escolha de base: Flexível ou Rígida
    DIAGNOSTIC       // Tela de diagnóstico com RMS
} MenuState;

volatile MenuState menu_state = MENU_MAIN;
// Seletor do tipo de motor e base (usados para definir os limites RMS)
volatile bool motor_ate_20cv = true;  // true: até 20cv, false: acima de 20cv
volatile bool base_flexivel = true;   // true: base flexível, false: base rígida

// Acumuladores para cálculo do RMS
volatile uint32_t sample_counter = 0;
volatile double sum_sq = 0.0;
volatile double rms_value = 0.0;

// Flags para indicar que um novo valor de RMS foi calculado
volatile bool new_rms_ready = false;

// Buffer para leitura do sensor ADXL345
uint8_t sensor_data[6];

// Instâncias para os dispositivos
ssd1306_t oled_disp;

// =====================
// FUNÇÕES DE BAIXO NÍVEL – ADXL345
// =====================

// Função para escrever um byte num registro do ADXL345
void adxl345_write_reg(uint8_t reg, uint8_t value) {
    uint8_t buf[2] = {reg, value};
    i2c_write_blocking(I2C_SENSOR, ADXL345_ADDR, buf, 2, false);
}

// Função para ler múltiplos bytes a partir de um registro do ADXL345
void adxl345_read_regs(uint8_t reg, uint8_t *buffer, uint8_t length) {
    i2c_write_blocking(I2C_SENSOR, ADXL345_ADDR, &reg, 1, true);
    i2c_read_blocking(I2C_SENSOR, ADXL345_ADDR, buffer, length, false);
}

// Inicializa o ADXL345
void adxl345_init() {
    // Colocar o sensor em standby (opcional)
    // Configurar o formato dos dados: full resolution, +-2g
    adxl345_write_reg(0x31, 0x08);
    // Iniciar a medição: set bit 3 (measure)
    adxl345_write_reg(0x2D, 0x08);
    printf("ADXL345 inicializado.\n");
}

// Função para ler acelerações (em g) dos três eixos
void adxl345_read_accel(float *ax, float *ay, float *az) {
    adxl345_read_regs(0x32, sensor_data, 6);
    // Conversão dos dados em little endian
    int16_t raw_x = (int16_t)(sensor_data[1] << 8 | sensor_data[0]);
    int16_t raw_y = (int16_t)(sensor_data[3] << 8 | sensor_data[2]);
    int16_t raw_z = (int16_t)(sensor_data[5] << 8 | sensor_data[4]);
    *ax = raw_x * ADXL345_SCALE;
    *ay = raw_y * ADXL345_SCALE;
    // Para o eixo Z, subtrai o valor de calibração (1g) para compensar a gravidade
    *az = raw_z * ADXL345_SCALE - CALIB_Z;
}

// =====================
// CALLBACK DE TIMER PARA AMOSTRAGEM DO SENSOR
// =====================

// Esta função é chamada a cada 1 ms (1000Hz)
bool sample_timer_callback(struct repeating_timer *t) {
    float ax, ay, az;
    // Leitura do sensor
    adxl345_read_accel(&ax, &ay, &az);
    // Acumular a soma dos quadrados (soma dos quadrados dos três eixos)
    double magnitude_sq = ax*ax + ay*ay + az*az;
    sum_sq += magnitude_sq;
    sample_counter++;

    // Se já foram coletadas 1000 amostras (1 segundo)
    if(sample_counter >= SAMPLE_COUNT) {
        // Calcula o RMS (raiz da média dos quadrados)
        rms_value = sqrt(sum_sq / SAMPLE_COUNT);
        new_rms_ready = true;
        // Imprime os valores médios e o RMS no monitor serial
        printf("Amostras: %u | RMS = %.3f g\n", sample_counter, rms_value);
        // Reinicia os acumuladores
        sample_counter = 0;
        sum_sq = 0.0;
    }

    // Também imprime (para debug) os valores atuais de aceleração a cada amostra
    // (Cuidado: muitas mensagens por segundo; comente se necessário)
    // printf("ax=%.3f, ay=%.3f, az=%.3f\n", ax, ay, az);

    return true; // para continuar o timer
}

// =====================
// FUNÇÕES DO MENU NO OLED
// =====================

void draw_menu_main() {
    // Exibe o menu principal: seleção entre "Motor até 20CV" e "Motor > 20CV"
    ssd1306_clear(&oled_disp);
    ssd1306_draw_string(&oled_disp, 0, 0, 1, "Selecione o motor:");
    if(motor_ate_20cv) {
        ssd1306_draw_string(&oled_disp, 0, 16, 1, "> Ate 20CV");
        ssd1306_draw_string(&oled_disp, 0, 32, 1, "  >20CV");
    } else {
        ssd1306_draw_string(&oled_disp, 0, 16, 1, "  Ate 20CV");
        ssd1306_draw_string(&oled_disp, 0, 32, 1, "> >20CV");
    }
    ssd1306_show(&oled_disp);
}

void draw_menu_sub() {
    // Exibe o menu secundário: seleção entre "Base Flexivel" e "Base Rigida"
    ssd1306_clear(&oled_disp);
    ssd1306_draw_string(&oled_disp, 0, 0, 1, "Selecione a base:");
    if(base_flexivel) {
        ssd1306_draw_string(&oled_disp, 0, 16, 1, "> Flexivel");
        ssd1306_draw_string(&oled_disp, 0, 32, 1, "  Rigida");
    } else {
        ssd1306_draw_string(&oled_disp, 0, 16, 1, "  Flexivel");
        ssd1306_draw_string(&oled_disp, 0, 32, 1, "> Rigida");
    }
    ssd1306_show(&oled_disp);
}

void draw_diagnostic_screen() {
    // Exibe os dados do diagnóstico: valor de RMS e o diagnóstico com base nos limites
    char buf[32];
    ssd1306_clear(&oled_disp);
    sprintf(buf, "RMS: %.3f g", rms_value);
    ssd1306_draw_string(&oled_disp, 0, 0, 1, buf);

    // Define os limites conforme a escolha do usuário
    float limite = 0.0f;
    if(motor_ate_20cv) {
        if(base_flexivel)
            limite = RMS_LIMIT_20CV_FLEXIBLE;
        else
            limite = RMS_LIMIT_20CV_RIGID;
    } else {
        if(base_flexivel)
            limite = RMS_LIMIT_ABOVE20CV_FLEXIBLE;
        else
            limite = RMS_LIMIT_ABOVE20CV_RIGID;
    }
    sprintf(buf, "Limite: %.3f g", limite);
    ssd1306_draw_string(&oled_disp, 0, 16, 1, buf);

    // Diagnóstico simples
    if(rms_value > limite)
        ssd1306_draw_string(&oled_disp, 0, 32, 1, "Diagnostico: ALERTA");
    else
        ssd1306_draw_string(&oled_disp, 0, 32, 1, "Diagnostico: OK");
    ssd1306_show(&oled_disp);
}

// =====================
// FUNÇÃO DE LEITURA DO JOYSTICK
// =====================

void update_joystick(void) {
    // Leitura dos canais ADC para X e Y
    uint16_t adc_x = adc_read(); // Leitura no canal atualmente selecionado
    // Para ler os dois eixos, é necessário selecionar os canais
    adc_select_input(0); // canal para X (GPIO 26)
    uint16_t x_val = adc_read();
    adc_select_input(1); // canal para Y (GPIO 27)
    uint16_t y_val = adc_read();
    
    // Para este exemplo, usaremos apenas o botão para alternar o menu
    // A leitura dos valores ADC pode ser usada para navegar (up/down) se implementado
    // Se o botão (GPIO 5) for pressionado (nível baixo assumindo resistor de pull-up interno)
    if(!gpio_get(JOYSTICK_BTN_PIN)) {
        // Aguarda debouncing
        sleep_ms(200);
        // Dependendo do estado atual, altera o menu
        if(menu_state == MENU_MAIN) {
            // Alterna a opção de motor
            motor_ate_20cv = !motor_ate_20cv;
            draw_menu_main();
        } else if(menu_state == MENU_SUB) {
            // Alterna a opção de base
            base_flexivel = !base_flexivel;
            draw_menu_sub();
        } else if(menu_state == DIAGNOSTIC) {
            // Em diagnóstico, um click pode voltar para o menu principal
            menu_state = MENU_MAIN;
            draw_menu_main();
        }
    }
    // Caso haja movimento vertical (usando os valores de ADC) pode-se implementar navegação
    // Este exemplo utiliza apenas o botão para alternar as opções.
}

// =====================
// FUNÇÃO MAIN
// =====================

int main() {
    stdio_init_all();
    printf("Inicializando o sistema...\n");

    // Inicializa I2C para o sensor ADXL345
    i2c_init(I2C_SENSOR, 100 * 1000);
    gpio_set_function(PIN_I2C_SENSOR_SDA, GPIO_FUNC_I2C);
    gpio_set_function(PIN_I2C_SENSOR_SCL, GPIO_FUNC_I2C);
    gpio_pull_up(PIN_I2C_SENSOR_SDA);
    gpio_pull_up(PIN_I2C_SENSOR_SCL);
    printf("I2C do sensor inicializado nos pinos %d (SDA) e %d (SCL)\n", PIN_I2C_SENSOR_SDA, PIN_I2C_SENSOR_SCL);

    // Inicializa I2C para o display OLED
    i2c_init(I2C_OLED, 400 * 1000);
    gpio_set_function(PIN_I2C_OLED_SDA, GPIO_FUNC_I2C);
    gpio_set_function(PIN_I2C_OLED_SCL, GPIO_FUNC_I2C);
    gpio_pull_up(PIN_I2C_OLED_SDA);
    gpio_pull_up(PIN_I2C_OLED_SCL);
    printf("I2C do OLED inicializado nos pinos %d (SDA) e %d (SCL)\n", PIN_I2C_OLED_SDA, PIN_I2C_OLED_SCL);

    // Inicializa o display OLED (assumindo resolução 128x64)
    if(!ssd1306_init(&oled_disp, 128, 64, OLED_ADDR, I2C_OLED)) {
        printf("Erro na inicializacao do OLED!\n");
        return -1;
    }
    printf("OLED inicializado.\n");

    // Inicializa ADC para o joystick
    adc_init();
    adc_gpio_init(JOYSTICK_ADC_X);
    adc_gpio_init(JOYSTICK_ADC_Y);
    // Configura o pino do botão do joystick
    gpio_init(JOYSTICK_BTN_PIN);
    gpio_set_dir(JOYSTICK_BTN_PIN, GPIO_IN);
    gpio_pull_up(JOYSTICK_BTN_PIN);
    printf("Joystick (ADC e botao) inicializado.\n");

    // Inicializa o ADXL345
    adxl345_init();

    // Exibe o menu principal ao iniciar
    draw_menu_main();

    // Configura timer repetidor para amostragem do sensor a 1ms (1000Hz)
    struct repeating_timer timer;
    if (!add_repeating_timer_ms(1, sample_timer_callback, NULL, &timer)) {
        printf("Erro ao configurar timer de amostragem.\n");
        return -1;
    }
    printf("Timer de amostragem configurado a %d Hz.\n", SAMPLE_RATE_HZ);

    // Loop principal
    while (true) {
        // Atualiza o joystick para detectar navegação/seleção
        update_joystick();

        // Se o usuário estiver no menu principal e clicar (por exemplo, após alternar a opção)
        // podemos detectar outro clique longo para avançar ao menu secundário.
        // Neste exemplo, se o botão for pressionado enquanto no menu principal,
        // passamos para o menu secundário.
        if (menu_state == MENU_MAIN && gpio_get(JOYSTICK_BTN_PIN) == 0) {
            sleep_ms(200);
            menu_state = MENU_SUB;
            draw_menu_sub();
        }
        // Se estiver no menu secundário e houver clique, avançamos para a tela de diagnóstico
        if (menu_state == MENU_SUB && gpio_get(JOYSTICK_BTN_PIN) == 0) {
            sleep_ms(200);
            menu_state = DIAGNOSTIC;
        }

        // Na tela de diagnóstico, atualiza a exibição continuamente com o valor do RMS
        if (menu_state == DIAGNOSTIC) {
            // Se um novo valor RMS foi calculado, atualiza a tela
            if (new_rms_ready) {
                draw_diagnostic_screen();
                new_rms_ready = false;
            }
        }
        sleep_ms(50); // Pequena pausa para reduzir uso da CPU
    }
    
    return 0;
}