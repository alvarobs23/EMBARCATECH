#include <stdio.h>
#include <math.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "hardware/adc.h"
#include <pico-ssd1306/ssd1306.h>
#include <string.h>

// Definições de pinos e I2C
#define ADXL345_SDA_PIN 8
#define ADXL345_SCL_PIN 9
#define ADXL345_I2C i2c0

#define OLED_SDA_PIN 14
#define OLED_SCL_PIN 15
#define OLED_I2C i2c1

// Endereço I2C do ADXL345
#define ADXL345_ADDR 0x53

// Registros do ADXL345
#define ADXL345_REG_DEVID         0x00
#define ADXL345_REG_POWER_CTL     0x2D
#define ADXL345_REG_DATA_FORMAT   0x31
#define ADXL345_REG_BW_RATE       0x2C
#define ADXL345_REG_DATAX0        0x32

// Pinos do joystick
#define JOYSTICK_X_PIN 26
#define JOYSTICK_Y_PIN 27
#define JOYSTICK_BTN_PIN 5

// Taxa de amostragem (pontos por segundo)
#define SAMPLE_RATE 1000
#define SAMPLE_DT (1.0f / SAMPLE_RATE)

// Fatores de conversão e integração (seguindo o primeiro código)
#define G_TO_MM_S2 9806.65f
// Usando SAMPLE_RATE para determinar o intervalo efetivo de integração
#define CONVERSION_FACTOR (1.0f / (2.0f * M_PI * SAMPLE_RATE))

// Número de amostras para cálculo do RMS (nesse caso, 1 segundo de dados)
#define NUM_SAMPLES SAMPLE_RATE

// Offset fixo para a aceleração da gravidade no eixo Z (já definido)
#define GRAVITY_OFFSET_Z 1.0f

// Variáveis globais para navegação
volatile uint8_t current_menu = 0; // 0: Menu principal, 1: Menu de base, 2: Tela de diagnóstico
volatile uint8_t menu_selection = 0; // Opção selecionada no menu (0,1,2)
uint32_t last_joystick_time = 0;       // Para debounce da navegação
const uint32_t debounce_delay = 200;   // 200 ms

// Variável para armazenar o valor RMS de velocidade
volatile float rms_velocity = 0.0f;

// Buffer para leitura do sensor
uint8_t sensor_data[6];

// Instância do display OLED
ssd1306_t oled_display;
#define OLED_WIDTH 128
#define OLED_HEIGHT 64

// Funções para inicialização do ADXL345
bool adxl345_init() {
    uint8_t data;
    // Verifica o device ID
    if (i2c_read_blocking(ADXL345_I2C, ADXL345_ADDR, &data, 1, false) != 1) {
        printf("Falha ao ler o device ID do ADXL345\n");
        return false;
    }
    printf("Device ID ADXL345: 0x%02x\n", data);

    // Ativa medição: POWER_CTL -> 0x08
    data = 0x08;
    if (i2c_write_blocking(ADXL345_I2C, ADXL345_ADDR, (uint8_t[]){ADXL345_REG_POWER_CTL, data}, 2, false) != 2) {
        printf("Falha ao configurar POWER_CTL\n");
        return false;
    }
    // Configura DATA_FORMAT: full resolution, ±2g (0x08)
    data = 0x08;
    if (i2c_write_blocking(ADXL345_I2C, ADXL345_ADDR, (uint8_t[]){ADXL345_REG_DATA_FORMAT, data}, 2, false) != 2) {
        printf("Falha ao configurar DATA_FORMAT\n");
        return false;
    }
    // Configura taxa de dados (ex.: 800Hz – valor 0x0D)
    data = 0x0D;
    if (i2c_write_blocking(ADXL345_I2C, ADXL345_ADDR, (uint8_t[]){ADXL345_REG_BW_RATE, data}, 2, false) != 2) {
        printf("Falha ao configurar BW_RATE\n");
        return false;
    }
    printf("ADXL345 inicializado com sucesso.\n");
    return true;
}

// Função para ler os dados de aceleração (X, Y, Z) em "g"
void adxl345_read(float *ax, float *ay, float *az) {
    if (i2c_write_blocking(ADXL345_I2C, ADXL345_ADDR, (uint8_t[]){ADXL345_REG_DATAX0}, 1, true) != 1) {
        printf("Erro ao solicitar leitura dos dados do sensor.\n");
        return;
    }
    if (i2c_read_blocking(ADXL345_I2C, ADXL345_ADDR, sensor_data, 6, false) != 6) {
        printf("Erro na leitura dos 6 bytes de dados.\n");
        return;
    }
    int16_t raw_x = (int16_t)((sensor_data[1] << 8) | sensor_data[0]);
    int16_t raw_y = (int16_t)((sensor_data[3] << 8) | sensor_data[2]);
    int16_t raw_z = (int16_t)((sensor_data[5] << 8) | sensor_data[4]);

    *ax = raw_x * 0.0039f;
    *ay = raw_y * 0.0039f;
    *az = raw_z * 0.0039f;
}

// Função para ler o joystick via ADC (retorna valor de 0 a 4095)
uint16_t read_joystick_adc(uint8_t channel) {
    adc_select_input(channel);
    return adc_read();
}

// Atualiza o display OLED de acordo com o menu e a opção selecionada
void update_oled_menu() {
    ssd1306_clear(&oled_display);
    char buffer[32];

    if (current_menu == 0) {
        // Menu principal: Classificação por potência do motor
        ssd1306_draw_string(&oled_display, 0, 0, 1, "Classif. por Potencia");
        sprintf(buffer, "1) Baixa Potencia%s", (menu_selection==0)?" <-": "");
        ssd1306_draw_string(&oled_display, 0, 12, 1, buffer);
        sprintf(buffer, "2) Media Potencia%s", (menu_selection==1)?" <-": "");
        ssd1306_draw_string(&oled_display, 0, 24, 1, buffer);
        sprintf(buffer, "3) Alta Potencia%s", (menu_selection==2)?" <-": "");
        ssd1306_draw_string(&oled_display, 0, 36, 1, buffer);
    } else if (current_menu == 1) {
        // Menu de base: Motor em base Flexível ou Rígida
        ssd1306_draw_string(&oled_display, 0, 0, 1, "Tipo de Base:");
        sprintf(buffer, "1) Flexivel%s", (menu_selection==0)?" <-": "");
        ssd1306_draw_string(&oled_display, 0, 12, 1, buffer);
        sprintf(buffer, "2) Rigida%s", (menu_selection==1)?" <-": "");
        ssd1306_draw_string(&oled_display, 0, 24, 1, buffer);
    } else if (current_menu == 2) {
        // Tela de diagnóstico: exibe o valor RMS em mm/s
        sprintf(buffer, "RMS: %.3f mm/s", rms_velocity);
        ssd1306_draw_string(&oled_display, 0, 0, 1, buffer);
        ssd1306_draw_string(&oled_display, 0, 12, 1, "Diag. motor...");
    }
    ssd1306_show(&oled_display);
}

// Função para processar os dados do sensor, convertendo aceleração em velocidade
// e calculando o RMS das amostras de velocidade (com base na abordagem do primeiro código).
void process_sensor_data() {
    // Vetor estático para armazenar NUM_SAMPLES amostras de velocidade (em mm/s)
    static float vel_samples[NUM_SAMPLES];
    static int sample_index = 0;
    float ax, ay, az;
    adxl345_read(&ax, &ay, &az);
    // Corrige o valor de aceleração no eixo Z subtraindo o offset (gravidade)
    float az_corr = az - GRAVITY_OFFSET_Z;
    // Calcula a velocidade (em mm/s) para essa amostra utilizando o mesmo método do primeiro código:
    // velocidade = aceleração (em g) * G_TO_MM_S2 * CONVERSION_FACTOR
    float vel_sample = az_corr * G_TO_MM_S2 * CONVERSION_FACTOR;
    vel_samples[sample_index++] = vel_sample;

    // Se já coletamos NUM_SAMPLES amostras (1 segundo de dados), calcula o RMS
    if (sample_index >= NUM_SAMPLES) {
        float sum_sq = 0.0f;
        for (int i = 0; i < NUM_SAMPLES; i++) {
            sum_sq += vel_samples[i] * vel_samples[i];
        }
        rms_velocity = sqrtf(sum_sq / NUM_SAMPLES);
        // Imprime os dados para depuração
        printf("Acel: X=%.3f g, Y=%.3f g, Z=%.3f g | RMS=%.3f mm/s\n", ax, ay, az, rms_velocity);
        // Reinicia o índice para a próxima janela de amostragem
        sample_index = 0;
        // Atualiza o display, se estiver na tela de diagnóstico
        if (current_menu == 2) {
            update_oled_menu();
        }
    }
}

// Inicializa o display OLED
bool oled_init() {
    i2c_init(OLED_I2C, 400 * 1000);
    gpio_set_function(OLED_SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(OLED_SCL_PIN, GPIO_FUNC_I2C);

    if (!ssd1306_init(&oled_display, OLED_WIDTH, OLED_HEIGHT, 0x3C, OLED_I2C)) {
        printf("Falha na inicializacao do OLED.\n");
        return false;
    }
    printf("OLED inicializado com sucesso.\n");
    return true;
}

// Atualiza o menu com base na navegação via joystick
void update_menu_navigation() {
    uint32_t now = to_ms_since_boot(get_absolute_time());
    if (now - last_joystick_time < debounce_delay) return;

    uint16_t adc_y = read_joystick_adc(1);
    uint8_t max_option = (current_menu == 0) ? 2 : (current_menu == 1) ? 1 : 0;

    if (adc_y < 1000 && menu_selection > 0) {
        menu_selection--;
        last_joystick_time = now;
        update_oled_menu();
    } else if (adc_y > 3000 && menu_selection < max_option) {
        menu_selection++;
        last_joystick_time = now;
        update_oled_menu();
    }
}

// Verifica se o botão do joystick foi pressionado para confirmar a opção
bool check_joystick_button() {
    static uint32_t last_btn_time = 0;
    uint32_t now = to_ms_since_boot(get_absolute_time());
    if (now - last_btn_time < debounce_delay) return false;

    if (gpio_get(JOYSTICK_BTN_PIN) == 0) {
        last_btn_time = now;
        return true;
    }
    return false;
}

int main() {
    stdio_init_all();
    printf("Iniciando o sistema...\n");

    // Inicializa I2C para ADXL345
    i2c_init(ADXL345_I2C, 400 * 1000);
    gpio_set_function(ADXL345_SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(ADXL345_SCL_PIN, GPIO_FUNC_I2C);

    // Inicializa ADC para o joystick
    adc_init();
    adc_gpio_init(JOYSTICK_X_PIN);
    adc_gpio_init(JOYSTICK_Y_PIN);

    // Configura o pino do botão do joystick com pull-up
    gpio_init(JOYSTICK_BTN_PIN);
    gpio_set_dir(JOYSTICK_BTN_PIN, GPIO_IN);
    gpio_pull_up(JOYSTICK_BTN_PIN);

    // Inicializa o display OLED
    if (!oled_init()) {
        printf("Erro na inicializacao do OLED. Abortando...\n");
        return 1;
    }

    // Inicializa o ADXL345
    if (!adxl345_init()) {
        printf("Erro na inicializacao do sensor ADXL345. Abortando...\n");
        return 1;
    }

    // Exibe o menu inicial (menu principal: classificação por potência)
    update_oled_menu();

    absolute_time_t next_sample_time = make_timeout_time_ms(1);

    while (true) {
        // Navegação dos menus apenas para os menus 0 (classificação) e 1 (tipo de base)
        if (current_menu == 0 || current_menu == 1) {
            update_menu_navigation();
            if (check_joystick_button()) {
                printf("Opcao selecionada: %d no menu %d\n", menu_selection, current_menu);
                current_menu++;
                menu_selection = 0;
                update_oled_menu();
            }
        }
        // Na tela de diagnóstico, processa os dados do sensor continuamente
        if (current_menu == 2) {
            process_sensor_data();
        }
        busy_wait_until(next_sample_time);
        next_sample_time = delayed_by_ms(next_sample_time, 1);
    }

    return 0;
}